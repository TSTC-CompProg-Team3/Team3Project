<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>